/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: SGP4.i

#define SWIGMODULE cppsgp4

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


#define SWIG_exception(code, msg) _swig_gopanic(msg)


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "SGP4.h"
#include "Observer.h"
#include "Eci.h"
#include "CoordGeodetic.h"
#include "TleException.h"
#include "CoordTopocentric.h"
#include "Helpers.h"


#include <string>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< PassDetails >::const_reference std_vector_Sl_PassDetails_Sg__get(std::vector< PassDetails > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_PassDetails_Sg__set(std::vector< PassDetails > *self,int i,std::vector< PassDetails >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< CoordGeodetic >::const_reference std_vector_Sl_CoordGeodetic_Sg__get(std::vector< CoordGeodetic > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_CoordGeodetic_Sg__set(std::vector< CoordGeodetic > *self,int i,std::vector< CoordGeodetic >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_cppsgp4_a859535cc4edeb99(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_cppsgp4_a859535cc4edeb99(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


std::vector< PassDetails > *_wrap_new_PassDetailsVector__SWIG_0_cppsgp4_a859535cc4edeb99() {
  std::vector< PassDetails > *result = 0 ;
  std::vector< PassDetails > *_swig_go_result;
  
  
  {
    try {
      result = (std::vector< PassDetails > *)new std::vector< PassDetails >();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(std::vector< PassDetails > **)&_swig_go_result = (std::vector< PassDetails > *)result; 
  return _swig_go_result;
}


std::vector< PassDetails > *_wrap_new_PassDetailsVector__SWIG_1_cppsgp4_a859535cc4edeb99(long long _swig_go_0) {
  std::vector< PassDetails >::size_type arg1 ;
  std::vector< PassDetails > *result = 0 ;
  std::vector< PassDetails > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  {
    try {
      result = (std::vector< PassDetails > *)new std::vector< PassDetails >(arg1);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(std::vector< PassDetails > **)&_swig_go_result = (std::vector< PassDetails > *)result; 
  return _swig_go_result;
}


std::vector< PassDetails > *_wrap_new_PassDetailsVector__SWIG_2_cppsgp4_a859535cc4edeb99(std::vector< PassDetails > *_swig_go_0) {
  std::vector< PassDetails > *arg1 = 0 ;
  std::vector< PassDetails > *result = 0 ;
  std::vector< PassDetails > *_swig_go_result;
  
  arg1 = *(std::vector< PassDetails > **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< PassDetails > *)new std::vector< PassDetails >((std::vector< PassDetails > const &)*arg1);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(std::vector< PassDetails > **)&_swig_go_result = (std::vector< PassDetails > *)result; 
  return _swig_go_result;
}


long long _wrap_PassDetailsVector_size_cppsgp4_a859535cc4edeb99(std::vector< PassDetails > *_swig_go_0) {
  std::vector< PassDetails > *arg1 = (std::vector< PassDetails > *) 0 ;
  std::vector< PassDetails >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< PassDetails > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< PassDetails > const *)arg1)->size();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_PassDetailsVector_capacity_cppsgp4_a859535cc4edeb99(std::vector< PassDetails > *_swig_go_0) {
  std::vector< PassDetails > *arg1 = (std::vector< PassDetails > *) 0 ;
  std::vector< PassDetails >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< PassDetails > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< PassDetails > const *)arg1)->capacity();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PassDetailsVector_reserve_cppsgp4_a859535cc4edeb99(std::vector< PassDetails > *_swig_go_0, long long _swig_go_1) {
  std::vector< PassDetails > *arg1 = (std::vector< PassDetails > *) 0 ;
  std::vector< PassDetails >::size_type arg2 ;
  
  arg1 = *(std::vector< PassDetails > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      (arg1)->reserve(arg2);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


bool _wrap_PassDetailsVector_isEmpty_cppsgp4_a859535cc4edeb99(std::vector< PassDetails > *_swig_go_0) {
  std::vector< PassDetails > *arg1 = (std::vector< PassDetails > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< PassDetails > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::vector< PassDetails > const *)arg1)->empty();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PassDetailsVector_clear_cppsgp4_a859535cc4edeb99(std::vector< PassDetails > *_swig_go_0) {
  std::vector< PassDetails > *arg1 = (std::vector< PassDetails > *) 0 ;
  
  arg1 = *(std::vector< PassDetails > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_PassDetailsVector_add_cppsgp4_a859535cc4edeb99(std::vector< PassDetails > *_swig_go_0, PassDetails *_swig_go_1) {
  std::vector< PassDetails > *arg1 = (std::vector< PassDetails > *) 0 ;
  std::vector< PassDetails >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< PassDetails > **)&_swig_go_0; 
  arg2 = *(std::vector< PassDetails >::value_type **)&_swig_go_1; 
  
  {
    try {
      (arg1)->push_back((std::vector< PassDetails >::value_type const &)*arg2);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


PassDetails *_wrap_PassDetailsVector_get_cppsgp4_a859535cc4edeb99(std::vector< PassDetails > *_swig_go_0, intgo _swig_go_1) {
  std::vector< PassDetails > *arg1 = (std::vector< PassDetails > *) 0 ;
  int arg2 ;
  std::vector< PassDetails >::value_type *result = 0 ;
  PassDetails *_swig_go_result;
  
  arg1 = *(std::vector< PassDetails > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      try {
        result = (std::vector< PassDetails >::value_type *) &std_vector_Sl_PassDetails_Sg__get(arg1,arg2);
      } catch(std::out_of_range &_e) {
        (void)_e;
        _swig_gopanic("C++ std::out_of_range exception thrown");
        
      };
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(std::vector< PassDetails >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PassDetailsVector_set_cppsgp4_a859535cc4edeb99(std::vector< PassDetails > *_swig_go_0, intgo _swig_go_1, PassDetails *_swig_go_2) {
  std::vector< PassDetails > *arg1 = (std::vector< PassDetails > *) 0 ;
  int arg2 ;
  std::vector< PassDetails >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< PassDetails > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< PassDetails >::value_type **)&_swig_go_2; 
  
  {
    try {
      try {
        std_vector_Sl_PassDetails_Sg__set(arg1,arg2,(PassDetails const &)*arg3);
      } catch(std::out_of_range &_e) {
        (void)_e;
        _swig_gopanic("C++ std::out_of_range exception thrown");
        
      };
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_delete_PassDetailsVector_cppsgp4_a859535cc4edeb99(std::vector< PassDetails > *_swig_go_0) {
  std::vector< PassDetails > *arg1 = (std::vector< PassDetails > *) 0 ;
  
  arg1 = *(std::vector< PassDetails > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


std::vector< CoordGeodetic > *_wrap_new_GeosVector__SWIG_0_cppsgp4_a859535cc4edeb99() {
  std::vector< CoordGeodetic > *result = 0 ;
  std::vector< CoordGeodetic > *_swig_go_result;
  
  
  {
    try {
      result = (std::vector< CoordGeodetic > *)new std::vector< CoordGeodetic >();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(std::vector< CoordGeodetic > **)&_swig_go_result = (std::vector< CoordGeodetic > *)result; 
  return _swig_go_result;
}


std::vector< CoordGeodetic > *_wrap_new_GeosVector__SWIG_1_cppsgp4_a859535cc4edeb99(long long _swig_go_0) {
  std::vector< CoordGeodetic >::size_type arg1 ;
  std::vector< CoordGeodetic > *result = 0 ;
  std::vector< CoordGeodetic > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  {
    try {
      result = (std::vector< CoordGeodetic > *)new std::vector< CoordGeodetic >(arg1);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(std::vector< CoordGeodetic > **)&_swig_go_result = (std::vector< CoordGeodetic > *)result; 
  return _swig_go_result;
}


std::vector< CoordGeodetic > *_wrap_new_GeosVector__SWIG_2_cppsgp4_a859535cc4edeb99(std::vector< CoordGeodetic > *_swig_go_0) {
  std::vector< CoordGeodetic > *arg1 = 0 ;
  std::vector< CoordGeodetic > *result = 0 ;
  std::vector< CoordGeodetic > *_swig_go_result;
  
  arg1 = *(std::vector< CoordGeodetic > **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< CoordGeodetic > *)new std::vector< CoordGeodetic >((std::vector< CoordGeodetic > const &)*arg1);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(std::vector< CoordGeodetic > **)&_swig_go_result = (std::vector< CoordGeodetic > *)result; 
  return _swig_go_result;
}


long long _wrap_GeosVector_size_cppsgp4_a859535cc4edeb99(std::vector< CoordGeodetic > *_swig_go_0) {
  std::vector< CoordGeodetic > *arg1 = (std::vector< CoordGeodetic > *) 0 ;
  std::vector< CoordGeodetic >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< CoordGeodetic > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< CoordGeodetic > const *)arg1)->size();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_GeosVector_capacity_cppsgp4_a859535cc4edeb99(std::vector< CoordGeodetic > *_swig_go_0) {
  std::vector< CoordGeodetic > *arg1 = (std::vector< CoordGeodetic > *) 0 ;
  std::vector< CoordGeodetic >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< CoordGeodetic > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< CoordGeodetic > const *)arg1)->capacity();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GeosVector_reserve_cppsgp4_a859535cc4edeb99(std::vector< CoordGeodetic > *_swig_go_0, long long _swig_go_1) {
  std::vector< CoordGeodetic > *arg1 = (std::vector< CoordGeodetic > *) 0 ;
  std::vector< CoordGeodetic >::size_type arg2 ;
  
  arg1 = *(std::vector< CoordGeodetic > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      (arg1)->reserve(arg2);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


bool _wrap_GeosVector_isEmpty_cppsgp4_a859535cc4edeb99(std::vector< CoordGeodetic > *_swig_go_0) {
  std::vector< CoordGeodetic > *arg1 = (std::vector< CoordGeodetic > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< CoordGeodetic > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::vector< CoordGeodetic > const *)arg1)->empty();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GeosVector_clear_cppsgp4_a859535cc4edeb99(std::vector< CoordGeodetic > *_swig_go_0) {
  std::vector< CoordGeodetic > *arg1 = (std::vector< CoordGeodetic > *) 0 ;
  
  arg1 = *(std::vector< CoordGeodetic > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_GeosVector_add_cppsgp4_a859535cc4edeb99(std::vector< CoordGeodetic > *_swig_go_0, CoordGeodetic *_swig_go_1) {
  std::vector< CoordGeodetic > *arg1 = (std::vector< CoordGeodetic > *) 0 ;
  std::vector< CoordGeodetic >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< CoordGeodetic > **)&_swig_go_0; 
  arg2 = *(std::vector< CoordGeodetic >::value_type **)&_swig_go_1; 
  
  {
    try {
      (arg1)->push_back((std::vector< CoordGeodetic >::value_type const &)*arg2);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


CoordGeodetic *_wrap_GeosVector_get_cppsgp4_a859535cc4edeb99(std::vector< CoordGeodetic > *_swig_go_0, intgo _swig_go_1) {
  std::vector< CoordGeodetic > *arg1 = (std::vector< CoordGeodetic > *) 0 ;
  int arg2 ;
  std::vector< CoordGeodetic >::value_type *result = 0 ;
  CoordGeodetic *_swig_go_result;
  
  arg1 = *(std::vector< CoordGeodetic > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      try {
        result = (std::vector< CoordGeodetic >::value_type *) &std_vector_Sl_CoordGeodetic_Sg__get(arg1,arg2);
      } catch(std::out_of_range &_e) {
        (void)_e;
        _swig_gopanic("C++ std::out_of_range exception thrown");
        
      };
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(std::vector< CoordGeodetic >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GeosVector_set_cppsgp4_a859535cc4edeb99(std::vector< CoordGeodetic > *_swig_go_0, intgo _swig_go_1, CoordGeodetic *_swig_go_2) {
  std::vector< CoordGeodetic > *arg1 = (std::vector< CoordGeodetic > *) 0 ;
  int arg2 ;
  std::vector< CoordGeodetic >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< CoordGeodetic > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< CoordGeodetic >::value_type **)&_swig_go_2; 
  
  {
    try {
      try {
        std_vector_Sl_CoordGeodetic_Sg__set(arg1,arg2,(CoordGeodetic const &)*arg3);
      } catch(std::out_of_range &_e) {
        (void)_e;
        _swig_gopanic("C++ std::out_of_range exception thrown");
        
      };
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_delete_GeosVector_cppsgp4_a859535cc4edeb99(std::vector< CoordGeodetic > *_swig_go_0) {
  std::vector< CoordGeodetic > *arg1 = (std::vector< CoordGeodetic > *) 0 ;
  
  arg1 = *(std::vector< CoordGeodetic > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


SGP4 *_wrap_new_SGP4_cppsgp4_a859535cc4edeb99(Tle *_swig_go_0) {
  Tle *arg1 = 0 ;
  SGP4 *result = 0 ;
  SGP4 *_swig_go_result;
  
  arg1 = *(Tle **)&_swig_go_0; 
  
  {
    try {
      result = (SGP4 *)new SGP4((Tle const &)*arg1);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(SGP4 **)&_swig_go_result = (SGP4 *)result; 
  return _swig_go_result;
}


Eci *_wrap_SGP4_FindPosition_cppsgp4_a859535cc4edeb99(SGP4 *_swig_go_0, DateTime *_swig_go_1) {
  SGP4 *arg1 = (SGP4 *) 0 ;
  DateTime *arg2 = 0 ;
  SwigValueWrapper< Eci > result;
  Eci *_swig_go_result;
  
  arg1 = *(SGP4 **)&_swig_go_0; 
  arg2 = *(DateTime **)&_swig_go_1; 
  
  {
    try {
      result = ((SGP4 const *)arg1)->FindPosition((DateTime const &)*arg2);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(Eci **)&_swig_go_result = new Eci(result); 
  return _swig_go_result;
}


void _wrap_delete_SGP4_cppsgp4_a859535cc4edeb99(SGP4 *_swig_go_0) {
  SGP4 *arg1 = (SGP4 *) 0 ;
  
  arg1 = *(SGP4 **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


Tle *_wrap_new_Tle_cppsgp4_a859535cc4edeb99(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Tle *result = 0 ;
  Tle *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (Tle *)new Tle((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(Tle **)&_swig_go_result = (Tle *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Tle_Line1_cppsgp4_a859535cc4edeb99(Tle *_swig_go_0) {
  Tle *arg1 = (Tle *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Tle **)&_swig_go_0; 
  
  {
    try {
      result = ((Tle const *)arg1)->Line1();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Tle_Line2_cppsgp4_a859535cc4edeb99(Tle *_swig_go_0) {
  Tle *arg1 = (Tle *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Tle **)&_swig_go_0; 
  
  {
    try {
      result = ((Tle const *)arg1)->Line2();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Tle_Name_cppsgp4_a859535cc4edeb99(Tle *_swig_go_0) {
  Tle *arg1 = (Tle *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Tle **)&_swig_go_0; 
  
  {
    try {
      result = ((Tle const *)arg1)->Name();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_Tle_NoradNumber_cppsgp4_a859535cc4edeb99(Tle *_swig_go_0) {
  Tle *arg1 = (Tle *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(Tle **)&_swig_go_0; 
  
  {
    try {
      result = (unsigned int)((Tle const *)arg1)->NoradNumber();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_Tle_cppsgp4_a859535cc4edeb99(Tle *_swig_go_0) {
  Tle *arg1 = (Tle *) 0 ;
  
  arg1 = *(Tle **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


Observer *_wrap_new_Observer_cppsgp4_a859535cc4edeb99(double _swig_go_0, double _swig_go_1, double _swig_go_2) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Observer *result = 0 ;
  Observer *_swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  {
    try {
      result = (Observer *)new Observer(arg1,arg2,arg3);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(Observer **)&_swig_go_result = (Observer *)result; 
  return _swig_go_result;
}


CoordTopocentric *_wrap_Observer_GetLookAngle_cppsgp4_a859535cc4edeb99(Observer *_swig_go_0, Eci *_swig_go_1) {
  Observer *arg1 = (Observer *) 0 ;
  Eci *arg2 = 0 ;
  CoordTopocentric result;
  CoordTopocentric *_swig_go_result;
  
  arg1 = *(Observer **)&_swig_go_0; 
  arg2 = *(Eci **)&_swig_go_1; 
  
  {
    try {
      result = (arg1)->GetLookAngle((Eci const &)*arg2);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(CoordTopocentric **)&_swig_go_result = new CoordTopocentric(result); 
  return _swig_go_result;
}


void _wrap_delete_Observer_cppsgp4_a859535cc4edeb99(Observer *_swig_go_0) {
  Observer *arg1 = (Observer *) 0 ;
  
  arg1 = *(Observer **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


Eci *_wrap_new_Eci_cppsgp4_a859535cc4edeb99(DateTime *_swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3) {
  DateTime *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Eci *result = 0 ;
  Eci *_swig_go_result;
  
  arg1 = *(DateTime **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  
  {
    try {
      result = (Eci *)new Eci((DateTime const &)*arg1,arg2,arg3,arg4);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(Eci **)&_swig_go_result = (Eci *)result; 
  return _swig_go_result;
}


CoordGeodetic *_wrap_Eci_ToGeodetic_cppsgp4_a859535cc4edeb99(Eci *_swig_go_0) {
  Eci *arg1 = (Eci *) 0 ;
  CoordGeodetic result;
  CoordGeodetic *_swig_go_result;
  
  arg1 = *(Eci **)&_swig_go_0; 
  
  {
    try {
      result = ((Eci const *)arg1)->ToGeodetic();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(CoordGeodetic **)&_swig_go_result = new CoordGeodetic(result); 
  return _swig_go_result;
}


void _wrap_delete_Eci_cppsgp4_a859535cc4edeb99(Eci *_swig_go_0) {
  Eci *arg1 = (Eci *) 0 ;
  
  arg1 = *(Eci **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


DateTime *_wrap_new_DateTime_cppsgp4_a859535cc4edeb99(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  DateTime *result = 0 ;
  DateTime *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  
  {
    try {
      result = (DateTime *)new DateTime(arg1,arg2,arg3,arg4,arg5,arg6);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(DateTime **)&_swig_go_result = (DateTime *)result; 
  return _swig_go_result;
}


DateTime *_wrap_DateTime_Now__SWIG_0_cppsgp4_a859535cc4edeb99(bool _swig_go_0) {
  bool arg1 ;
  SwigValueWrapper< DateTime > result;
  DateTime *_swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  
  {
    try {
      result = DateTime::Now(arg1);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(DateTime **)&_swig_go_result = new DateTime(result); 
  return _swig_go_result;
}


DateTime *_wrap_DateTime_Now__SWIG_1_cppsgp4_a859535cc4edeb99() {
  SwigValueWrapper< DateTime > result;
  DateTime *_swig_go_result;
  
  
  {
    try {
      result = DateTime::Now();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(DateTime **)&_swig_go_result = new DateTime(result); 
  return _swig_go_result;
}


double _wrap_DateTime_ToJulian_cppsgp4_a859535cc4edeb99(DateTime *_swig_go_0) {
  DateTime *arg1 = (DateTime *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(DateTime **)&_swig_go_0; 
  
  {
    try {
      result = (double)((DateTime const *)arg1)->ToJulian();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_DateTime_cppsgp4_a859535cc4edeb99(DateTime *_swig_go_0) {
  DateTime *arg1 = (DateTime *) 0 ;
  
  arg1 = *(DateTime **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


std::vector< CoordGeodetic > *_wrap_GeneratePosList_cppsgp4_a859535cc4edeb99(SGP4 *_swig_go_0, DateTime *_swig_go_1, DateTime *_swig_go_2, intgo _swig_go_3) {
  SGP4 *arg1 = 0 ;
  DateTime *arg2 = 0 ;
  DateTime *arg3 = 0 ;
  int arg4 ;
  std::vector< CoordGeodetic > result;
  std::vector< CoordGeodetic > *_swig_go_result;
  
  arg1 = *(SGP4 **)&_swig_go_0; 
  arg2 = *(DateTime **)&_swig_go_1; 
  arg3 = *(DateTime **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  {
    try {
      result = GeneratePosList(*arg1,(DateTime const &)*arg2,(DateTime const &)*arg3,arg4);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(std::vector< CoordGeodetic > **)&_swig_go_result = new std::vector< CoordGeodetic >(result); 
  return _swig_go_result;
}


std::vector< PassDetails > *_wrap_GeneratePassList_cppsgp4_a859535cc4edeb99(double _swig_go_0, double _swig_go_1, double _swig_go_2, SGP4 *_swig_go_3, DateTime *_swig_go_4, DateTime *_swig_go_5, intgo _swig_go_6) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  SGP4 *arg4 = 0 ;
  DateTime *arg5 = 0 ;
  DateTime *arg6 = 0 ;
  int arg7 ;
  std::vector< PassDetails > result;
  std::vector< PassDetails > *_swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = *(SGP4 **)&_swig_go_3; 
  arg5 = *(DateTime **)&_swig_go_4; 
  arg6 = *(DateTime **)&_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  
  {
    try {
      result = GeneratePassList(arg1,arg2,arg3,*arg4,(DateTime const &)*arg5,(DateTime const &)*arg6,arg7);;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(std::vector< PassDetails > **)&_swig_go_result = new std::vector< PassDetails >(result); 
  return _swig_go_result;
}


void _wrap_CoordGeodetic_latitude_set_cppsgp4_a859535cc4edeb99(CoordGeodetic *_swig_go_0, double _swig_go_1) {
  CoordGeodetic *arg1 = (CoordGeodetic *) 0 ;
  double arg2 ;
  
  arg1 = *(CoordGeodetic **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->latitude = arg2;
  
}


double _wrap_CoordGeodetic_latitude_get_cppsgp4_a859535cc4edeb99(CoordGeodetic *_swig_go_0) {
  CoordGeodetic *arg1 = (CoordGeodetic *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoordGeodetic **)&_swig_go_0; 
  
  result = (double) ((arg1)->latitude);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_CoordGeodetic_longitude_set_cppsgp4_a859535cc4edeb99(CoordGeodetic *_swig_go_0, double _swig_go_1) {
  CoordGeodetic *arg1 = (CoordGeodetic *) 0 ;
  double arg2 ;
  
  arg1 = *(CoordGeodetic **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->longitude = arg2;
  
}


double _wrap_CoordGeodetic_longitude_get_cppsgp4_a859535cc4edeb99(CoordGeodetic *_swig_go_0) {
  CoordGeodetic *arg1 = (CoordGeodetic *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoordGeodetic **)&_swig_go_0; 
  
  result = (double) ((arg1)->longitude);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_CoordGeodetic_altitude_set_cppsgp4_a859535cc4edeb99(CoordGeodetic *_swig_go_0, double _swig_go_1) {
  CoordGeodetic *arg1 = (CoordGeodetic *) 0 ;
  double arg2 ;
  
  arg1 = *(CoordGeodetic **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->altitude = arg2;
  
}


double _wrap_CoordGeodetic_altitude_get_cppsgp4_a859535cc4edeb99(CoordGeodetic *_swig_go_0) {
  CoordGeodetic *arg1 = (CoordGeodetic *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoordGeodetic **)&_swig_go_0; 
  
  result = (double) ((arg1)->altitude);
  _swig_go_result = result; 
  return _swig_go_result;
}


CoordGeodetic *_wrap_new_CoordGeodetic_cppsgp4_a859535cc4edeb99() {
  CoordGeodetic *result = 0 ;
  CoordGeodetic *_swig_go_result;
  
  
  {
    try {
      result = (CoordGeodetic *)new CoordGeodetic();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(CoordGeodetic **)&_swig_go_result = (CoordGeodetic *)result; 
  return _swig_go_result;
}


void _wrap_delete_CoordGeodetic_cppsgp4_a859535cc4edeb99(CoordGeodetic *_swig_go_0) {
  CoordGeodetic *arg1 = (CoordGeodetic *) 0 ;
  
  arg1 = *(CoordGeodetic **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_CoordTopocentric_azimuth_set_cppsgp4_a859535cc4edeb99(CoordTopocentric *_swig_go_0, double _swig_go_1) {
  CoordTopocentric *arg1 = (CoordTopocentric *) 0 ;
  double arg2 ;
  
  arg1 = *(CoordTopocentric **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->azimuth = arg2;
  
}


double _wrap_CoordTopocentric_azimuth_get_cppsgp4_a859535cc4edeb99(CoordTopocentric *_swig_go_0) {
  CoordTopocentric *arg1 = (CoordTopocentric *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoordTopocentric **)&_swig_go_0; 
  
  result = (double) ((arg1)->azimuth);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_CoordTopocentric_elevation_set_cppsgp4_a859535cc4edeb99(CoordTopocentric *_swig_go_0, double _swig_go_1) {
  CoordTopocentric *arg1 = (CoordTopocentric *) 0 ;
  double arg2 ;
  
  arg1 = *(CoordTopocentric **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->elevation = arg2;
  
}


double _wrap_CoordTopocentric_elevation_get_cppsgp4_a859535cc4edeb99(CoordTopocentric *_swig_go_0) {
  CoordTopocentric *arg1 = (CoordTopocentric *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoordTopocentric **)&_swig_go_0; 
  
  result = (double) ((arg1)->elevation);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_CoordTopocentric_Xrange_set_cppsgp4_a859535cc4edeb99(CoordTopocentric *_swig_go_0, double _swig_go_1) {
  CoordTopocentric *arg1 = (CoordTopocentric *) 0 ;
  double arg2 ;
  
  arg1 = *(CoordTopocentric **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->range = arg2;
  
}


double _wrap_CoordTopocentric_Xrange_get_cppsgp4_a859535cc4edeb99(CoordTopocentric *_swig_go_0) {
  CoordTopocentric *arg1 = (CoordTopocentric *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoordTopocentric **)&_swig_go_0; 
  
  result = (double) ((arg1)->range);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_CoordTopocentric_range_rate_set_cppsgp4_a859535cc4edeb99(CoordTopocentric *_swig_go_0, double _swig_go_1) {
  CoordTopocentric *arg1 = (CoordTopocentric *) 0 ;
  double arg2 ;
  
  arg1 = *(CoordTopocentric **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->range_rate = arg2;
  
}


double _wrap_CoordTopocentric_range_rate_get_cppsgp4_a859535cc4edeb99(CoordTopocentric *_swig_go_0) {
  CoordTopocentric *arg1 = (CoordTopocentric *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoordTopocentric **)&_swig_go_0; 
  
  result = (double) ((arg1)->range_rate);
  _swig_go_result = result; 
  return _swig_go_result;
}


CoordTopocentric *_wrap_new_CoordTopocentric_cppsgp4_a859535cc4edeb99() {
  CoordTopocentric *result = 0 ;
  CoordTopocentric *_swig_go_result;
  
  
  {
    try {
      result = (CoordTopocentric *)new CoordTopocentric();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(CoordTopocentric **)&_swig_go_result = (CoordTopocentric *)result; 
  return _swig_go_result;
}


void _wrap_delete_CoordTopocentric_cppsgp4_a859535cc4edeb99(CoordTopocentric *_swig_go_0) {
  CoordTopocentric *arg1 = (CoordTopocentric *) 0 ;
  
  arg1 = *(CoordTopocentric **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_EventHorizonDetails_time_set_cppsgp4_a859535cc4edeb99(EventHorizonDetails *_swig_go_0, DateTime *_swig_go_1) {
  EventHorizonDetails *arg1 = (EventHorizonDetails *) 0 ;
  DateTime *arg2 = (DateTime *) 0 ;
  
  arg1 = *(EventHorizonDetails **)&_swig_go_0; 
  arg2 = *(DateTime **)&_swig_go_1; 
  
  if (arg1) (arg1)->time = *arg2;
  
}


DateTime *_wrap_EventHorizonDetails_time_get_cppsgp4_a859535cc4edeb99(EventHorizonDetails *_swig_go_0) {
  EventHorizonDetails *arg1 = (EventHorizonDetails *) 0 ;
  DateTime *result = 0 ;
  DateTime *_swig_go_result;
  
  arg1 = *(EventHorizonDetails **)&_swig_go_0; 
  
  result = (DateTime *)& ((arg1)->time);
  *(DateTime **)&_swig_go_result = (DateTime *)result; 
  return _swig_go_result;
}


void _wrap_EventHorizonDetails_azimuth_set_cppsgp4_a859535cc4edeb99(EventHorizonDetails *_swig_go_0, double _swig_go_1) {
  EventHorizonDetails *arg1 = (EventHorizonDetails *) 0 ;
  double arg2 ;
  
  arg1 = *(EventHorizonDetails **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->azimuth = arg2;
  
}


double _wrap_EventHorizonDetails_azimuth_get_cppsgp4_a859535cc4edeb99(EventHorizonDetails *_swig_go_0) {
  EventHorizonDetails *arg1 = (EventHorizonDetails *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(EventHorizonDetails **)&_swig_go_0; 
  
  result = (double) ((arg1)->azimuth);
  _swig_go_result = result; 
  return _swig_go_result;
}


EventHorizonDetails *_wrap_new_EventHorizonDetails_cppsgp4_a859535cc4edeb99() {
  EventHorizonDetails *result = 0 ;
  EventHorizonDetails *_swig_go_result;
  
  
  {
    try {
      result = (EventHorizonDetails *)new EventHorizonDetails();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(EventHorizonDetails **)&_swig_go_result = (EventHorizonDetails *)result; 
  return _swig_go_result;
}


void _wrap_delete_EventHorizonDetails_cppsgp4_a859535cc4edeb99(EventHorizonDetails *_swig_go_0) {
  EventHorizonDetails *arg1 = (EventHorizonDetails *) 0 ;
  
  arg1 = *(EventHorizonDetails **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_PassDetails_aos_set_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0, DateTime *_swig_go_1) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  DateTime *arg2 = (DateTime *) 0 ;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  arg2 = *(DateTime **)&_swig_go_1; 
  
  if (arg1) (arg1)->aos = *arg2;
  
}


DateTime *_wrap_PassDetails_aos_get_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  DateTime *result = 0 ;
  DateTime *_swig_go_result;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  
  result = (DateTime *)& ((arg1)->aos);
  *(DateTime **)&_swig_go_result = (DateTime *)result; 
  return _swig_go_result;
}


void _wrap_PassDetails_los_set_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0, DateTime *_swig_go_1) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  DateTime *arg2 = (DateTime *) 0 ;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  arg2 = *(DateTime **)&_swig_go_1; 
  
  if (arg1) (arg1)->los = *arg2;
  
}


DateTime *_wrap_PassDetails_los_get_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  DateTime *result = 0 ;
  DateTime *_swig_go_result;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  
  result = (DateTime *)& ((arg1)->los);
  *(DateTime **)&_swig_go_result = (DateTime *)result; 
  return _swig_go_result;
}


void _wrap_PassDetails_aos_azimuth_set_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0, double _swig_go_1) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  double arg2 ;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->aos_azimuth = arg2;
  
}


double _wrap_PassDetails_aos_azimuth_get_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  
  result = (double) ((arg1)->aos_azimuth);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PassDetails_los_azimuth_set_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0, double _swig_go_1) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  double arg2 ;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->los_azimuth = arg2;
  
}


double _wrap_PassDetails_los_azimuth_get_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  
  result = (double) ((arg1)->los_azimuth);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PassDetails_max_elevation_set_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0, double _swig_go_1) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  double arg2 ;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->max_elevation = arg2;
  
}


double _wrap_PassDetails_max_elevation_get_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  
  result = (double) ((arg1)->max_elevation);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PassDetails_aos_range_rate_set_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0, double _swig_go_1) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  double arg2 ;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->aos_range_rate = arg2;
  
}


double _wrap_PassDetails_aos_range_rate_get_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  
  result = (double) ((arg1)->aos_range_rate);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PassDetails_los_range_rate_set_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0, double _swig_go_1) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  double arg2 ;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->los_range_rate = arg2;
  
}


double _wrap_PassDetails_los_range_rate_get_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  
  result = (double) ((arg1)->los_range_rate);
  _swig_go_result = result; 
  return _swig_go_result;
}


PassDetails *_wrap_new_PassDetails_cppsgp4_a859535cc4edeb99() {
  PassDetails *result = 0 ;
  PassDetails *_swig_go_result;
  
  
  {
    try {
      result = (PassDetails *)new PassDetails();;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  *(PassDetails **)&_swig_go_result = (PassDetails *)result; 
  return _swig_go_result;
}


void _wrap_delete_PassDetails_cppsgp4_a859535cc4edeb99(PassDetails *_swig_go_0) {
  PassDetails *arg1 = (PassDetails *) 0 ;
  
  arg1 = *(PassDetails **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (std::runtime_error &e) {
      _swig_gopanic(e.what());
    }
  }
  
}


#ifdef __cplusplus
}
#endif

